provider "azurerm" {
    subscription_id = var.subscription_id
    tenant_id       = var.tenant_id
    features {}
}

provider "docker" {
  version = "~> 2.6"
  host    = "npipe:////.//pipe//docker_engine"
    registry_auth {
    address = "https://index.docker.io"
    username = var.dockerhub_username
    password = var.dockerhub_pass
  }
}

resource "docker_container" "krtest" {
    image = "krassy19/test_repo:latest"
    name = "nx"
}


resource "azurerm_resource_group" "main" {
  name     = "kr-resources"
  location = "West Europe"
}

resource "azurerm_virtual_network" "main" {
  name                = "${var.prefix}-network"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
}

resource "azurerm_subnet" "internal" {
  name                 = "internal"
  resource_group_name  = azurerm_resource_group.main.name
  virtual_network_name = azurerm_virtual_network.main.name
  address_prefix       = "10.0.2.0/24"
}

resource "azurerm_public_ip" "main" {
    name                         = "myPublicIP"
    location                     =  azurerm_resource_group.main.location
    resource_group_name          =  azurerm_resource_group.main.name
    allocation_method            = "Static"
}

resource "azurerm_network_interface" "main" {
  name                = "${var.prefix}-nic"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name

  ip_configuration {
    name                          = "testconfiguration1"
    subnet_id                     = azurerm_subnet.internal.id
    private_ip_address_allocation = "Dynamic"
	public_ip_address_id          = azurerm_public_ip.main.id
  }
}



resource "azurerm_network_security_group" "main" {
    name                = "myNetworkSecurityGroup"
    location            = azurerm_resource_group.main.location
    resource_group_name = azurerm_resource_group.main.name
    
    security_rule {
        name                       = "SSH"
        priority                   = 1001
        direction                  = "Inbound"
        access                     = "Allow"
        protocol                   = "Tcp"
        source_port_range          = "*"
        destination_port_range     = "22"
        source_address_prefix      = "*"
        destination_address_prefix = "*"
    }

    tags = {
        environment = "Terraform Demo"
    }
}

resource "azurerm_virtual_machine" "main" {
  name                  = "${var.prefix}-vm"
  location              = azurerm_resource_group.main.location
  resource_group_name   = azurerm_resource_group.main.name
  network_interface_ids = [azurerm_network_interface.main.id]
  vm_size               = "Standard_DS1_v2"

  # Uncomment this line to delete the OS disk automatically when deleting the VM
  # delete_os_disk_on_termination = true

  storage_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }
  storage_os_disk {
    name              = "myosdisk1"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }
  os_profile {
    computer_name  = "krLinuxVmmm"
    admin_username = var.admin_username
    admin_password = var.admin_password
  }
  os_profile_linux_config {
    disable_password_authentication = false
 }
  connection {
      host     =  "${azurerm_public_ip.main.ip_address}"  
      type     = "ssh"
      user     = var.admin_username
      password = var.admin_password
    }
 
  provisioner "remote-exec" {
    inline = [
	  "sudo apt-get update",
 	  "sudo apt-get install apt-transport-https ca-certificates curl software-properties-common",
	  "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -",
      "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable\"",
	  "sudo apt --yes --no-install-recommends install docker.io",
	  "sudo docker pull krassy19/test_repo:nx",
	  "sudo docker run -d -e nx_data=ENV1 -p8080:80 krassy19/test_repo:nx"
    ]

	
 }
  tags = {
    environment = "staging"
  }
}
